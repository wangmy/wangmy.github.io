<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on YoyoWong</title>
        <link>https://wangmingyou.github.io/post/</link>
        <description>Recent content in Posts on YoyoWong</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 18 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wangmingyou.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>源码学习</title>
        <link>https://wangmingyou.github.io/p/open_source/</link>
        <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wangmingyou.github.io/p/open_source/</guid>
        <description>&lt;h1 id=&#34;objc-源码&#34;&gt;objc 源码&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;media/objc818-canrun.zip&#34; &gt;objc818-canrun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;media/objc838-canrun.zip&#34; &gt;objc838-canrun&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Mac切换Python版本</title>
        <link>https://wangmingyou.github.io/p/mac-change-pyhton/</link>
        <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://wangmingyou.github.io/p/mac-change-pyhton/</guid>
        <description>&lt;h1 id=&#34;mac切换python版本&#34;&gt;Mac切换Python版本&lt;/h1&gt;
&lt;h2 id=&#34;找到安装的mac路径&#34;&gt;找到安装的mac路径&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;系统自带的：/System/Library/Frameworks/Python.framework
自己安装的python3: /usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;修改配置文件&#34;&gt;修改配置文件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;找到根目录下的***.zshrc*** 或者 &lt;em&gt;&lt;strong&gt;.bash_profile&lt;/strong&gt;&lt;/em&gt;
&lt;img src=&#34;https://wangmingyou.github.io/p/mac-change-pyhton/assets/16495345533056.jpg&#34;
	width=&#34;1240&#34;
	height=&#34;688&#34;
	srcset=&#34;https://wangmingyou.github.io/p/mac-change-pyhton/assets/16495345533056_hu15c7c349cd219dc700813f6d454ddd97_111489_480x0_resize_q75_box.jpg 480w, https://wangmingyou.github.io/p/mac-change-pyhton/assets/16495345533056_hu15c7c349cd219dc700813f6d454ddd97_111489_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改文件
将如下内容添加到文件中,根据需求设置默认python版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# python 配置
alias python=&amp;#39;/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7&amp;#39;
# alias python=&amp;#39;/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/bin/python3.9&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;保存文件，在命令行执行&lt;code&gt;source ~/.zshrc&lt;/code&gt; 或者  &lt;code&gt;source ~/.bash_profile&lt;/code&gt;，是修改的内容生效&lt;/p&gt;
&lt;h2 id=&#34;查看生效后的python版本&#34;&gt;查看生效后的python版本&lt;/h2&gt;
&lt;p&gt;在命令行执行&lt;code&gt;python --version&lt;/code&gt;，查看版本。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>消息发送源码学习</title>
        <link>https://wangmingyou.github.io/p/objc_msgsend/</link>
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
        
        <guid>https://wangmingyou.github.io/p/objc_msgsend/</guid>
        <description>&lt;h1 id=&#34;入口-objc_msgsend&#34;&gt;入口 objc_msgSend&lt;/h1&gt;
&lt;h2 id=&#34;提出疑问&#34;&gt;提出疑问&lt;/h2&gt;
&lt;p&gt;方法 -&amp;gt; 消息， 如何发送的？&lt;/p&gt;
&lt;p&gt;sel-imp 方法编译为函数默认有两个参数 （id self， SEL _cmd）&lt;/p&gt;
&lt;p&gt;self: 消息接受者&lt;/p&gt;
&lt;p&gt;_cmd: 方法编号， 找到具体函数实现&lt;/p&gt;
&lt;p&gt;目录 （SEL），页码（IMP： 指向函数具体实现的指针），具体内容（函数实现 ）&lt;/p&gt;
&lt;p&gt;如何从SEL 找到 IMP&lt;/p&gt;
&lt;h2 id=&#34;汇编断点查看&#34;&gt;汇编，断点查看&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495348622618.jpg&#34;
	width=&#34;1240&#34;
	height=&#34;775&#34;
	srcset=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495348622618_hu15c7c349cd219dc700813f6d454ddd97_305516_480x0_resize_q75_box.jpg 480w, https://wangmingyou.github.io/p/objc_msgsend/assets/16495348622618_hu15c7c349cd219dc700813f6d454ddd97_305516_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;libobjc源码分析&#34;&gt;&lt;strong&gt;libobjc源码分析&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;进入汇编查找过程&#34;&gt;进入汇编查找过程&lt;/h3&gt;
&lt;p&gt;objc-msg-arm64 ENTRY _objc_msgSend&lt;/p&gt;
&lt;h4 id=&#34;cachelookup&#34;&gt;CacheLookup&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CacheLookup, 有缓存列表&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CacheHit，找到返回&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;直接从寄存器获取&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;CheckMiss，没找到&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;正常就是用Normal进来的，所以走__objc_msgSend_uncached&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;c. add 添加进去，方便下次操作&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;methodtablelookup&#34;&gt;MethodTableLookup&lt;/h4&gt;
&lt;p&gt;我们都知道OC的对象最终汇编成结构体，结构体是Class，也就是&lt;strong&gt;objc_class&lt;/strong&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;由此可以看到在结构体里面有： 方法列表，属性列表，协议列表&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;runtime 是由 C, C++, 汇编混合提供运行时功能， 所以搜索删除一个&amp;quot;_&amp;quot;, 搜索&amp;quot;_class_lookupMethodAndLoadCache3&amp;quot;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;进入cc函数方法-查找过程&#34;&gt;进入C/C++函数方法 查找过程&lt;/h3&gt;
&lt;p&gt;此时已经离开汇编过程（快速），从&lt;strong&gt;lookUpImpOrForward开始进入慢速查找过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cls： Class 类对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cls类对象&lt;/p&gt;
&lt;p&gt;实例对象&lt;/p&gt;
&lt;p&gt;元类对象&lt;/p&gt;
&lt;h4 id=&#34;继承关系实现&#34;&gt;继承关系实现&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;实际应用&#34;&gt;实际应用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;NSObject 分类添加方法，防止崩溃&lt;/li&gt;
&lt;li&gt;网络获取数据，可能int/string，int.length，不知道方法是什么，应该动态添加&lt;/li&gt;
&lt;li&gt;遇到崩溃，提示退出页面，上报crash，动态处理&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;动态方法解析&#34;&gt;动态方法解析&lt;/h1&gt;
&lt;p&gt;TypeEcoding v@: id:self, cmd -&amp;gt; void&lt;/p&gt;
&lt;h1 id=&#34;消息转发&#34;&gt;消息转发&lt;/h1&gt;
&lt;p&gt;aspect，消息转发的具体应用&lt;/p&gt;
&lt;h1 id=&#34;源码跑功能&#34;&gt;源码跑功能&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495351497665.jpg&#34;
	width=&#34;1240&#34;
	height=&#34;775&#34;
	srcset=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495351497665_hu15c7c349cd219dc700813f6d454ddd97_181735_480x0_resize_q75_box.jpg 480w, https://wangmingyou.github.io/p/objc_msgsend/assets/16495351497665_hu15c7c349cd219dc700813f6d454ddd97_181735_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;消息发送的流程图&#34;&gt;消息发送的流程图&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495353011914.png&#34;
	width=&#34;1692&#34;
	height=&#34;1574&#34;
	srcset=&#34;https://wangmingyou.github.io/p/objc_msgsend/assets/16495353011914_hu72ba67d9a517d1912b354c46437f9210_150214_480x0_resize_box_3.png 480w, https://wangmingyou.github.io/p/objc_msgsend/assets/16495353011914_hu72ba67d9a517d1912b354c46437f9210_150214_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;方法的本质是发送消息，发送消息的几个流程&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;快速查找（objc_msgSend）~ cache_t 缓存消息&lt;/li&gt;
&lt;li&gt;慢速查找～ 递归自己｜父类～ lookupImpOrForWard&lt;/li&gt;
&lt;li&gt;查不到消息：动态⽅法解析~ resolveInstanceMethod&lt;/li&gt;
&lt;li&gt;消息快速转发~ forwardingTargetForSelector&lt;/li&gt;
&lt;li&gt;消息慢速转发~ methodSignatureForSelector &amp;amp; forwardInvocation&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;sel 是方法编号，在read_images期间就编译进内存&lt;/li&gt;
&lt;li&gt;imp是函数实现的指针，找imp就是找函数&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;sel 可以理解为书本的目录标题，imp就是书本的页码。查找具体的函数，就是看这本书里面具体的内容，通过想看的标题找到对应的页骂最后翻到具体的内容，即是 sel - 指针(imp) - 具体实现&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>分析 在OC中 [self class] 与 [super class] 的区别</title>
        <link>https://wangmingyou.github.io/p/super-class-study/</link>
        <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://wangmingyou.github.io/p/super-class-study/</guid>
        <description>&lt;h1 id=&#34;直接看一段代码&#34;&gt;直接看一段代码&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;@interface Person : NSObject
@end

@implementation Person
@end

@interface Worker : Person
@end

@implementation Worker
- (instancetype)init{
    
    self = [super init];
    if (self) {
        NSLog(@&amp;#34;🦁️ [self class] %@&amp;#34;,NSStringFromClass([self class]));
        NSLog(@&amp;#34;🦁️ [super class] %@&amp;#34;,NSStringFromClass([super class]));
    }
    return self;
}
@end

@implementation TestSuperClass
// 分析 [self class] 与 [super class] 的区别
- (void) test {
    Worker *worker = [[Worker alloc] init];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;打印结果&#34;&gt;打印结果：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;2022-04-09 19:08:09.612737+0800 Object-CDemo[68945:1164926] 🦁️ [self class] Worker
2022-04-09 19:08:09.612854+0800 Object-CDemo[68945:1164926] 🦁️ [super class] Worker
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;相信一个打印大家都很好理解，第二个就不好理解了，那么现在主要来分析下 super class&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在objc 源码中 找到class 的源码实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;- (Class)class {
   /*
       1. 所有的函数，都有两个默认的隐藏参数：(id self , sel _cmd),  这里的用的self就是第一个隐藏参数，就是消息的接受体
       2. 现在的关键问题是，隐藏参数self 到底是谁，也就是消息的接受者是谁
    */
    return object_getClass(self);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里显而易见，所以第一个[self class]的self是worker就显而易见了。那么第二个为什么也是worker呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分析的常见思路&#34;&gt;分析的常见思路&lt;/h2&gt;
&lt;h3 id=&#34;方法1-clang-看到底底层编译成什么样的源码&#34;&gt;方法1: clang 看到底底层编译成什么样的源码&lt;/h3&gt;
&lt;h3 id=&#34;方法2-objc源码-run起来直接断点分析分析&#34;&gt;方法2: objc源码 run起来，直接断点分析分析&lt;/h3&gt;
&lt;h3 id=&#34;方法3-断点汇编--源码配合-分析&#34;&gt;方法3: 断点汇编 + 源码配合 分析&lt;/h3&gt;
&lt;h3 id=&#34;方法4-nsobject-methodswizzling-class-方法&#34;&gt;方法4: NSObject MethodSwizzling class 方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;前两种方法，我觉得都有点麻烦，方法4，MethodSwizzling也只是验证打印结果，对我们分析本质，帮助可能不大，所以我直接选择方法3，快捷还可以分析底层原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;断点汇编分析&#34;&gt;断点汇编分析&lt;/h1&gt;
&lt;h2 id=&#34;首先选择断点的汇编模式&#34;&gt;首先选择断点的汇编模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://wangmingyou.github.io/p/super-class-study/media/16495371029886.jpg&#34;
	width=&#34;1240&#34;
	height=&#34;775&#34;
	srcset=&#34;https://wangmingyou.github.io/p/super-class-study/media/16495371029886_hu15c7c349cd219dc700813f6d454ddd97_206985_480x0_resize_q75_box.jpg 480w, https://wangmingyou.github.io/p/super-class-study/media/16495371029886_hu15c7c349cd219dc700813f6d454ddd97_206985_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://wangmingyou.github.io/p/super-class-study/media/16495371254586.jpg&#34;
	width=&#34;1240&#34;
	height=&#34;834&#34;
	srcset=&#34;https://wangmingyou.github.io/p/super-class-study/media/16495371254586_hu15c7c349cd219dc700813f6d454ddd97_333785_480x0_resize_q75_box.jpg 480w, https://wangmingyou.github.io/p/super-class-study/media/16495371254586_hu15c7c349cd219dc700813f6d454ddd97_333785_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;356px&#34;
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这里显而易见  &lt;code&gt;[super class]&lt;/code&gt; 最终走的是objc_msgSendSuper2消息发送，再结合源码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;objc_msgSendSuper2(struct objc_super * _Nonnull super, SEL _Nonnull op, ...)

#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;// 通过objc源码里面简化 objc_super&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;struct objc_super { 
    __unsafe_unretained _Nonnull id receiver; //消息接收者
    __unsafe_unretained _Nonnull Class super_class;
};

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;也就是&lt;code&gt;NSLog(@&amp;quot;🦁️ [super class] %@&amp;quot;,NSStringFromClass([super class]))&lt;/code&gt; 等同于下面的一段代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;// [super class] 等同于下面一段代码
struct objc_super test_super = {
      self, // 研究对象是在worker里面
      class_getSuperclass([self class]),
};
NSLog(@&amp;#34;%@&amp;#34;,NSStringFromClass(objc_msgSendSuper2(&amp;amp;test_super,@selector(class))));
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;转化后很好理解了，其实就是给self（worker）发送消息，调用class方法。这样就能理解打印结果了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;那么-super-class-与-self-class-有什么区别呢&#34;&gt;那么 [super class] 与 [self class] 有什么区别呢&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然现在理解了两者结果一样，那么[super class] 有什么特殊的呢？也就是&lt;code&gt;objc_super&lt;/code&gt; 里面的 &lt;code&gt;class_getSuperclass([self class]),&lt;/code&gt; 存在的意义是什么呢？
其实本质区别就是&lt;code&gt;objc_msgSendSuper&lt;/code&gt; 与&lt;code&gt;objc_msgSend&lt;/code&gt; 有什么区别?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;objc_msgsend-流程&#34;&gt;objc_msgSend 流程&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://wangmy.github.io/p/objc_msgsend/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;objc_msgSend具体流程&lt;/a&gt; 可以看到这个objc_msgSend慢速流程回去遍历父类，比较慢，objc_msgSendSuper就可以跳过很多遍历，变得更快了。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;[self class] 就是发送消息objc_msgSend，消息接受者是 self ⽅法编号：class
[super class] 本质就是objc_msgSendSuper, 消息的接受者还是 self ⽅法编号：class 逻辑教育 只是objc_msgSendSuper 会更快 直接跳过 self 的查找&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
